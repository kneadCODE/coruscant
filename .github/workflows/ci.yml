# CI Pipeline for Coruscant Project
#
# This workflow implements a streamlined CI/CD pipeline for a Go monorepo following
# Clean Architecture and Domain-Driven Design principles.
#
# Pipeline Phases:
# Phase 1: Parallel Testing & Quality Gates (tests, lint, govulncheck)
# Phase 2: Quality Analysis (SonarCloud with coverage)
# Phase 3: Docker Build (after all tests pass)
# Phase 4: Docker Push (main only, after all gates pass)
# Phase 5: CI Status (overall pipeline result)
#
# Security Architecture:
# - Security scanning handled by dedicated trivy.yml workflow (GHAS reporting)
# - CI focuses on build/test/push without security gating
# - GitHub Security tab manages security findings with override capability
# - Supply chain security with SBOM attestations
#
# Note: This follows Option B (GHAS flexibility) security model

name: "CI Pipeline"

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

# Default permissions (most restrictive)
permissions: read-all

# Global environment variables
env:
  CONTAINER_REGISTRY: ghcr.io # GitHub Container Registry
  REPOSITORY_NAME: ${{ github.repository }} # Full repository name (org/repo)

jobs:
  # =============================================================================
  # PHASE 1: PARALLEL SECURITY GATES & TESTING
  # =============================================================================

  # Unit tests with coverage for Go modules
  test:
    name: "Test (Unit ${{ matrix.module }})"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read # Read repository contents
      actions: write # Upload test artifacts
    strategy:
      matrix:
        include:
          - module: "golib"
            path: "./shared/golib"
          - module: "kyber"
            path: "./systems/kyber"
            gen-mocks: true
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Go workspace
        uses: ./.github/actions/setup-go-workspace

      - name: Generate mocks
        if: matrix.gen-mocks == true
        run: docker compose run --rm -w /app/${{ matrix.path }} mockery

      - name: Start observability stack and PostgreSQL for tests
        run: |
          # Start observability stack and PostgreSQL needed for tests
          docker compose up -d alloy tempo loki mimir postgres
          # Wait for services to be ready
          sleep 10

      - name: Run tests with coverage
        working-directory: ${{ matrix.path }}
        env:
          OTEL_EXPORTER_OTLP_ENDPOINT: localhost:4317
          OTEL_EXPORTER_OTLP_INSECURE: "true"
          OTEL_SERVICE_NAME: ci-test
          OTEL_RESOURCE_ATTRIBUTES: "service.namespace=${{ matrix.module }},service.version=v1.0.0,deployment.environment=dev"
          OTEL_SERVICE_VERSION: ci
          PG_HOST: localhost
          PG_PORT: 5432
          PG_DATABASE: postgres
          PG_USERNAME: coruscant
          PG_PASSWORD: trust
          PG_SSL_MODE: disable
        run: |
          go test -v -race -coverprofile=coverage.out -failfast -timeout 5m ./...

      - name: Cleanup observability stack and PostgreSQL
        if: always()
        run: |
          docker compose down -v

      # Upload coverage artifacts for SonarCloud
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: coverage-${{ matrix.module }}
          path: ${{ matrix.path }}/coverage.out
          retention-days: 1

  # Code quality linting
  quality-lint:
    name: "Quality (Lint ${{ matrix.module }})"
    runs-on: ubuntu-latest
    permissions:
      contents: read # Read repository contents
    strategy:
      matrix:
        include:
          - module: "golib"
            path: "./shared/golib"
          - module: "kyber"
            path: "./systems/kyber"
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Go workspace
        uses: ./.github/actions/setup-go-workspace

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
        with:
          working-directory: ${{ matrix.path }}
          version: v2.4.0

  # SCA - Software Composition Analysis (Go vulnerabilities)
  security-sca-govulncheck:
    name: "Security SCA (govulncheck ${{ matrix.module }})"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read # Read repository contents
    strategy:
      matrix:
        include:
          - module: "golib"
            path: "./shared/golib"
          - module: "kyber"
            path: "./systems/kyber"
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Go workspace
        uses: ./.github/actions/setup-go-workspace

      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@v1.1.4

      - name: Run govulncheck
        working-directory: ${{ matrix.path }}
        run: govulncheck ./...

  # =============================================================================
  # PHASE 2: QUALITY ANALYSIS (needs coverage from tests)
  # =============================================================================

  quality-sonar:
    name: "SonarCloud"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [test] # Needs coverage artifacts
    permissions:
      contents: read # Read repository contents
      actions: read # Download test coverage artifacts
    strategy:
      matrix:
        include:
          - module: "root"
            path: "."
            sonar-token-secret: SONAR_TOKEN_ROOT
          - module: "golib"
            path: "./shared/golib"
            sonar-token-secret: SONAR_TOKEN_GOLIB
          - module: "kyber"
            path: "./systems/kyber"
            sonar-token-secret: SONAR_TOKEN_KYBER
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0 # Full history for SonarCloud

      # Download coverage artifacts (skip for root scan)
      - name: Download coverage artifacts
        if: matrix.module != 'root'
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: coverage-${{ matrix.module }}
          path: ${{ matrix.path }}

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@fd88b7d7ccbaefd23d8f36f73b59db7a3d246602 # v6.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets[matrix.sonar-token-secret] }}
        with:
          projectBaseDir: ${{ matrix.path }}

  # =============================================================================
  # PHASE 3: DOCKER BUILD (after all security gates pass)
  # =============================================================================

  docker-build:
    name: "Build (Docker ${{ matrix.system }}/${{ matrix.image }})"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read # Read repository contents
      actions: write # Upload docker image artifacts
    strategy:
      matrix:
        include:
          - system: "kyber"
            image: "go-services"
            dockerfile: "shared/docker/go-services.Dockerfile"
            build-args: |
              SYSTEM=kyber
              RUNTIME_IMAGE_TAG=nonroot
          - system: "kyber"
            image: "db-migrations"
            dockerfile: "shared/docker/golang-migrate.Dockerfile"
            build-args: |
              SYSTEM=kyber
              RUNTIME_IMAGE_TAG=nonroot
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Generate metadata
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: ${{ env.CONTAINER_REGISTRY }}/${{ env.REPOSITORY_NAME }}/${{ matrix.system }}/${{ matrix.image }}
          tags: |
            type=sha

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: false # Build only, don't push yet
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: ${{ matrix.build-args }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker

      # Export image as tar file for sharing with other jobs
      - name: Export Docker image
        run: |
          docker save ${{ steps.meta.outputs.tags }} -o ${{ matrix.system }}-${{ matrix.image }}-${{ github.sha }}.tar

      # Upload image artifact for security scanning and attestation jobs
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: docker-image-${{ matrix.system }}-${{ matrix.image }}-${{ github.sha }}
          path: ${{ matrix.system }}-${{ matrix.image }}-${{ github.sha }}.tar
          retention-days: 1 # Clean up after 1 day

  docker-push:
    name: "Push (Docker ${{ matrix.system }}/${{ matrix.image }})"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [quality-lint, security-sca-govulncheck, quality-sonar, docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read # Read repository contents
      packages: write # Push to GitHub Container Registry
      actions: read # Download docker image artifacts
      id-token: write # For keyless signing with Cosign
      attestations: write # For GitHub native attestations
    strategy:
      matrix:
        include:
          - system: "kyber"
            image: "go-services"
            dockerfile: "shared/docker/go-services.Dockerfile"
            build-args: |
              SYSTEM=kyber
              RUNTIME_IMAGE_TAG=nonroot
          - system: "kyber"
            image: "db-migrations"
            dockerfile: "shared/docker/golang-migrate.Dockerfile"
            build-args: |
              SYSTEM=kyber
              RUNTIME_IMAGE_TAG=nonroot
      fail-fast: false

    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate metadata
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: ${{ env.CONTAINER_REGISTRY }}/${{ env.REPOSITORY_NAME }}/${{ matrix.system }}/${{ matrix.image }}
          tags: |
            type=sha

      # Download pre-built image artifact from docker-build job
      - name: Download Docker image artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: docker-image-${{ matrix.system }}-${{ matrix.image }}-${{ github.sha }}

      # Load and push image from artifact
      - name: Load and push Docker image
        id: build
        run: |
          # Load image from artifact
          docker load -i ${{ matrix.system }}-${{ matrix.image }}-${{ github.sha }}.tar

          # Push to registry
          echo "Pushing image to registry: ${{ steps.meta.outputs.tags }}"
          docker push ${{ steps.meta.outputs.tags }}

          # Extract digest for signing
          pushed_digest=$(docker inspect ${{ steps.meta.outputs.tags }} --format='{{index .RepoDigests 0}}' | cut -d'@' -f2)
          echo "digest=$pushed_digest" >> $GITHUB_OUTPUT
          echo "Pushed image with digest: $pushed_digest"

      # Generate SBOM for attestation
      - name: Generate SBOM with Syft
        uses: anchore/sbom-action@f8bdd1d8ac5e901a77a92f111440fdb1b593736b # v0.20.6
        with:
          image: ${{ steps.meta.outputs.tags }}
          format: spdx-json
          output-file: sbom.spdx.json

      # Generate GitHub SBOM Attestation (replaces Cosign attestation)
      - name: Generate GitHub Attestation for SBOM
        uses: actions/attest-sbom@4651f806c01d8637787e274ac3bdf724ef169f34 # v3.0.0
        with:
          subject-name: ${{ steps.meta.outputs.tags }}
          subject-digest: ${{ steps.build.outputs.digest }}
          sbom-path: sbom.spdx.json

  # =============================================================================
  # PHASE 6: CI STATUS (overall pipeline result)
  # =============================================================================

  ci-status:
    name: "CI Status"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs:
      [test, quality-lint, security-sca-govulncheck, quality-sonar, docker-push]
    if: always() # Run for both PRs (docker-push skipped) and main (docker-push runs)
    permissions: {} # No permissions needed for status check

    steps:
      - run: exit 1
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
