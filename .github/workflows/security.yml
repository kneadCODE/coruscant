# Comprehensive Security Auditing Pipeline for Coruscant Project
#
# This workflow implements comprehensive security auditing for compliance and monitoring.
# Unlike the CI pipeline, this runs deep security analysis without blocking development.
#
# Security Coverage:
# - SAST: CodeQL with extended queries + SonarCloud security rules
# - SCA: govulncheck + Trivy SCA + additional analysis
# - DAST: OWASP ZAP dynamic application security testing (when apps deployed)
# - IaC: Trivy configuration scanning + infrastructure analysis
# - Container: Deep vulnerability analysis with all severity levels
#
# Philosophy:
# - Comprehensive analysis over speed
# - Full security coverage for audit compliance
# - Does NOT block development (monitoring only)
# - Scheduled runs for continuous security monitoring

name: "Security Auditing"

on:
  schedule:
    - cron: "0 2 * * *"  # Daily at 2 AM UTC

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  sast-codeql:
    name: "CodeQL Analysis (Scheduled ${{ matrix.module }})"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    strategy:
      matrix:
        include:
          - module: "golib"
            path: "./shared/golib"
            to-build: false
          - module: "kyber"
            path: "./systems/kyber"
            to-build: true
      fail-fast: false
    concurrency:
      group: codeql-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: '1.25'
          cache-dependency-path: |
            go.work.sum
            shared/golib/go.sum
            systems/kyber/go.sum

      - name: Initialize CodeQL
        uses: github/codeql-action/init@f1f6e5f6af878fb37288ce1c627459e94dbf7d01 # v3.30.1
        with:
          languages: go
          queries: security-extended,security-and-quality

      - name: Download dependencies
        run: go mod download all

      - name: Build applications
        working-directory: ${{ matrix.path }}
        if: matrix.to-build == true
        run: |
          for cmdpkg in cmd/*; do
            if [ -d "$cmdpkg" ]; then
              echo "Building $cmdpkg"
              go build "./$cmdpkg"
            fi
          done

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@f1f6e5f6af878fb37288ce1c627459e94dbf7d01 # v3.30.1
        with:
          category: "/language:go"

  # =============================================================================
  # SAST - Additional Security Scanning with SonarQube (Scheduled Only)
  # =============================================================================
  sast-sonarqube:
    name: "SonarQube Scan"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'schedule'  # Only run on scheduled builds for comprehensive analysis
    strategy:
      matrix:
        include:
          - project-dir: .                         # Root project scan
            token-secret: SONAR_TOKEN_ROOT
          - project-dir: shared/golib             # Shared library scan
            token-secret: SONAR_TOKEN_GOLIB
          - project-dir: systems/kyber           # Kyber system scan
            token-secret: SONAR_TOKEN_KYBER
      fail-fast: false  # Continue scanning other modules if one fails

    steps:
      # Checkout with full history for SonarQube to analyze change patterns
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0
        with:
          fetch-depth: 0  # Full git history needed for accurate analysis

      # Run SonarQube security and quality analysis
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@1a6d90ebcb0e6a6b1d87e37ba693fe453195ae25 # v5.3.1
        env:
          SONAR_TOKEN: ${{ secrets[matrix.token-secret] }}  # Module-specific SonarQube token
        with:
          projectBaseDir: ${{ matrix.project-dir }}         # Directory to scan


  # =============================================================================
  # SCA - Software Composition Analysis (Go Vulnerability Checking)
  # =============================================================================
  # Scans for known vulnerabilities in Go dependencies using official Go tooling
  # Complements GitHub's dependency scanning with Go-specific vulnerability database
  sca-govulncheck:
    name: "Go Vulnerability Check"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        module: ["golib", "kyber"]        # Scan each Go module
        include:
          - module: "golib"
            path: "./shared/golib"         # Shared library path
          - module: "kyber"
            path: "./systems/kyber"        # Kyber system path
      fail-fast: false  # Continue scanning other modules if one fails

    steps:
      # Checkout repository for dependency analysis
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      # Setup Go for govulncheck tool
      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: '1.25'  # Latest Go version

      # Install Go's official vulnerability checking tool
      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@v1.1.4  # Pinned version

      # Scan for vulnerabilities in Go dependencies and code
      - name: Run govulncheck
        working-directory: ${{ matrix.path }}
        run: |
          govulncheck ./...  # Scan all packages in module

  # =============================================================================

  # SCA - Trivy Dependency Vulnerability Analysis (Comprehensive)
  # =============================================================================
  # Scheduled-only comprehensive dependency vulnerability analysis
  sca-trivy-comprehensive:
    name: "Trivy SCA ${{ matrix.module }}"
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Allow longer for comprehensive analysis
    strategy:
      matrix:
        include:
          - module: "golib"
            path: "./shared/golib"
          - module: "kyber"
            path: "./systems/kyber"
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Trivy SCA (Full Analysis)
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        with:
          scan-type: 'fs'
          input: ${{ matrix.path }}
          scanners: 'vuln'
          severity: 'CRITICAL,HIGH,MEDIUM'
          format: 'sarif'
          output: trivy-sca-${{ matrix.module }}.sarif
          exit-code: '0'

      - name: Upload Trivy SCA results
        uses: github/codeql-action/upload-sarif@f1f6e5f6af878fb37288ce1c627459e94dbf7d01 # v3.30.1
        with:
          sarif_file: 'trivy-sca-${{ matrix.module }}.sarif'

  # =============================================================================
  # IaC - Infrastructure as Code Security Scanning
  # =============================================================================
  # Scans Docker files, Kubernetes manifests, and other infrastructure configs
  # for security misconfigurations and best practice violations
  iac-scan:
    name: "Infrastructure Scanning"
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      # Checkout repository for infrastructure scanning
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      # Scan infrastructure configurations for security issues
      - name: Run Trivy IaC scan
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        with:
          scan-type: 'config'                       # Scan configuration files
          format: 'sarif'                          # SARIF output for GitHub
          output: 'trivy-iac-results.sarif'       # Output file
          severity: 'CRITICAL,HIGH,MEDIUM'         # Include medium+ severity issues

      # Upload infrastructure scan results to GitHub Security tab
      - name: Upload IaC scan results
        uses: github/codeql-action/upload-sarif@v3 # v3
        with:
          sarif_file: 'trivy-iac-results.sarif'   # Upload SARIF results

  # =============================================================================


  security-status:
    name: "Security Status"
    runs-on: ubuntu-latest
    needs: [sast-codeql, sca-govulncheck, sca-trivy-comprehensive, iac-scan]  # Wait for all security jobs
    steps:
      # Fail if any security scan failed or was cancelled
      - run: exit 1
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
