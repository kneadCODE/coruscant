# https://taskfile.dev

version: "3"

# Tasks definition
# ==============================
tasks:
  default:
    desc: "Show available tasks"
    silent: true
    cmds:
      - task --list

  new:system:go:
    desc: Create a new system with standard directory structure
    silent: true
    vars:
      SYSTEM_NAME: "{{.NAME}}"
    preconditions:
      - sh: "[ ! -z '{{.NAME}}' ]"
        msg: "Please provide system name: task new:system NAME=mysystem"
    cmds:
      # Create directory structure
      - mkdir -p systems/{{.SYSTEM_NAME}}/cmd/httpapi
      - mkdir -p systems/{{.SYSTEM_NAME}}/cmd/consumer
      - mkdir -p systems/{{.SYSTEM_NAME}}/internal/domain/domain1/{entity,repository,service,usecase}
      - mkdir -p systems/{{.SYSTEM_NAME}}/internal/handler/{graphql,openapi,kafkaconsumer}
      - mkdir -p systems/{{.SYSTEM_NAME}}/internal/gateway/extsystem1
      - mkdir -p systems/{{.SYSTEM_NAME}}/internal/pkg
      - mkdir -p systems/{{.SYSTEM_NAME}}/build
      - mkdir -p systems/{{.SYSTEM_NAME}}/deploy/{base,local,dev,qa,staging,prod}
      - mkdir -p systems/{{.SYSTEM_NAME}}/db-migrations/pg
      # Create doc.go files
      - echo "package main" > systems/{{.SYSTEM_NAME}}/cmd/httpapi/doc.go
      - echo "package main" > systems/{{.SYSTEM_NAME}}/cmd/consumer/doc.go
      - echo "package entity" > systems/{{.SYSTEM_NAME}}/internal/domain/domain1/entity/doc.go
      - echo "package repository" > systems/{{.SYSTEM_NAME}}/internal/domain/domain1/repository/doc.go
      - echo "package service" > systems/{{.SYSTEM_NAME}}/internal/domain/domain1/service/doc.go
      - echo "package usecase" > systems/{{.SYSTEM_NAME}}/internal/domain/domain1/usecase/doc.go
      - echo "package graphql" > systems/{{.SYSTEM_NAME}}/internal/handler/graphql/doc.go
      - echo "package openapi" > systems/{{.SYSTEM_NAME}}/internal/handler/openapi/doc.go
      - echo "package kafkaconsumer" > systems/{{.SYSTEM_NAME}}/internal/handler/kafkaconsumer/doc.go
      - echo "package extsystem1" > systems/{{.SYSTEM_NAME}}/internal/gateway/extsystem1/doc.go
      - echo "package pkg" > systems/{{.SYSTEM_NAME}}/internal/pkg/doc.go
      # Create README files
      - echo "# {{.SYSTEM_NAME}}" > systems/{{.SYSTEM_NAME}}/README.md
      - echo "# Build" > systems/{{.SYSTEM_NAME}}/build/README.md
      - echo "# Deploy" > systems/{{.SYSTEM_NAME}}/deploy/README.md
      - echo "# DB Migrations" > systems/{{.SYSTEM_NAME}}/db-migrations/README.md
      - echo "# Base" > systems/{{.SYSTEM_NAME}}/deploy/base/README.md

  go:lint:check:all:
    desc: "Run linters check for all Go modules"
    cmds:
      - task: golangci

  go:lint:fix:all:
    desc: "Run linters fix for all Go modules"
    cmds:
      - task: golangci
        vars:
          CMD_FLAGS: --fix

  compose:down:
    desc: "Shut down all development services"
    cmds:
      - docker compose down -v
  compose:logs:
    desc: "Show logs from services"
    cmds:
      - docker compose logs -f {{.CLI_ARGS | default ""}}

  compose:obs:up:
    desc: "Start the observability stack"
    silent: true
    cmds:
      - docker compose up -d alloy tempo loki mimir pyroscope grafana
      - echo "Observability stack started!"
      - echo "Grafana UI - http://localhost:3000 (admin/admin)"
      - echo "Alloy UI - http://localhost:12345"
      - echo "Tempo - http://localhost:3200"
      - echo "Loki - http://localhost:3100"
      - echo "Mimir - http://localhost:9009"
      - echo "Pyroscope - http://localhost:4040"

  compose:obs:down:
    desc: "Stop the observability stack"
    cmds:
      - docker compose down -v alloy tempo loki mimir pyroscope grafana

  compose:obs:logs:
    desc: "Follow logs for observability services"
    cmds:
      - docker compose logs -f {{.CLI_ARGS | default "alloy tempo loki mimir pyroscope grafana"}}

  compose:pg:up:
    desc: "Start PostgreSQL service for local development"
    env:
      PG_DBS: kyber
    cmds:
      - docker compose up -d postgres

  tidy:golib:
    desc: "Run go mod tidy for golib"
    cmds:
      - task: compose:go:tidy
        vars:
          SYSTEM: golib
  test:golib:
    desc: "Run golib tests in Docker"
    cmds:
      - task: compose:go:test
        vars:
          SYSTEM: golib
  tidy:kyber:
    desc: "Run go mod tidy for Kyber"
    cmds:
      - task: compose:go:tidy
        vars:
          SYSTEM: kyber
  test:kyber:
    desc: "Run Kyber tests in Docker"
    cmds:
      - task: compose:go:test
        vars:
          SYSTEM: kyber
  mocks:kyber:
    desc: "Generate mocks for Kyber using mockery container"
    cmds:
      - docker compose run --rm -w /app/systems/kyber mockery
  run:kyber:httpapi:
    desc: "Run Kyber HTTP API"
    cmds:
      - task: compose:go:run
        vars:
          SYSTEM: kyber
          SERVICE: httpapi

  # Common tasks used by all systems
  # ------------------------------

  compose:go:tidy:
    desc: "Run go mod tidy"
    internal: true
    cmds:
      - docker compose run --rm --name {{.SYSTEM}}-go-tidy {{.SYSTEM}}-go go mod tidy
  compose:go:test:
    desc: "Run go tests"
    internal: true
    cmds:
      - docker compose run --rm --name {{.SYSTEM}}-test {{.SYSTEM}}-go go test -v -coverprofile=c.out -failfast -timeout 30s ./...
  compose:go:run:
    desc: "Run go"
    internal: true
    cmds:
      - docker compose run --rm --service-ports --name {{.SYSTEM}}-{{.SERVICE}} -e OTEL_SERVICE_NAME={{.SERVICE}} {{.SYSTEM}}-go sh -c "cd cmd/{{.SERVICE}} && air -c ../../../../shared/scripts/air/service.toml"

  golangci:
    desc: "Run linters for all Go modules"
    internal: true
    cmds:
      - |
        for mod in $(find . -name go.mod -not -path "./vendor/*"); do
          dir=$(dirname "$mod")
          echo "Linting $dir"
          (cd "$dir" && golangci-lint run {{.CMD_FLAGS}})
        done
