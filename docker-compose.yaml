# Docker Compose Configuration for local development
name: coruscant

x-common-resources: &common-resources
  deploy:
    resources:
      limits:
        cpus: '1.0'
        memory: 512M

x-common-go-envs: &common-go-envs
  CGO_ENABLED: 0
  GOOS: linux
  GOARCH: arm64
  TZ: UTC
  OTEL_EXPORTER_OTLP_PROTOCOL: grpc
  OTEL_EXPORTER_OTLP_ENDPOINT: alloy:4317
  OTEL_EXPORTER_OTLP_INSECURE: "true"
  PYROSCOPE_SERVER_ADDRESS: http://pyroscope:4040
  PG_HOST: postgres
  PG_PORT: 5432
  PG_DATABASE: postgres
  PG_USERNAME: coruscant
  PG_PASSWORD: trust
  PG_SSL_MODE: disable

x-common-service: &common-service
  networks:
    - dev-net
  <<: *common-resources

x-common-go-base: &common-go-base
  <<: *common-service
  build:
      context: .
      dockerfile: ./shared/docker/air.Dockerfile
  volumes:
    - .:/app:delegated
    - ./go.work:/app/go.work
    - go-mod-cache:/go/pkg/mod:cached
    - go-build-cache:/root/.cache/go-build:cached
  environment: *common-go-envs

services:
  # Library development services
  golib-go:
    <<: *common-go-base
    working_dir: /app/shared/golib
    environment:
      <<: *common-go-envs
      # OTEL Configuration
      OTEL_SERVICE_NAME: golib
      OTEL_RESOURCE_ATTRIBUTES: "service.namespace=golib,service.version=v1.0.0,deployment.environment=dev"
    depends_on:
      - alloy

  # Kyber system services
  kyber-go:
    <<: *common-go-base
    working_dir: /app/systems/kyber
    environment:
      <<: *common-go-envs
      PG_DATABASE: kyber
      # OTEL Configuration
      OTEL_SERVICE_NAME: kyber
      OTEL_RESOURCE_ATTRIBUTES: "service.namespace=kyber,service.version=v1.0.0,deployment.environment=dev"
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      alloy:
        condition: service_started

  postgres:
    <<: *common-service
    image: postgres:18-alpine
    container_name: coruscant-pg
    restart: always
    environment:
      POSTGRES_USER: coruscant
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_MULTIPLE_DATABASES: kyber
    volumes:
      - ./shared/scripts/postgres/init-multiple-dbs.sh:/docker-entrypoint-initdb.d/init-multiple-dbs.sh:ro
      - pg-data:/var/lib/postgresql/data:delegated
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U coruscant"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Observability Stack Services
  # Grafana Alloy - OTEL Collector
  alloy:
    <<: *common-service
    image: grafana/alloy:v1.10.2
    container_name: coruscant-alloy
    restart: unless-stopped
    command:
      - run
      - /etc/alloy/config.hcl
      - --storage.path=/var/lib/alloy/data
      - --server.http.listen-addr=0.0.0.0:12345
      - --cluster.enabled=false
    volumes:
      - ./shared/infra/grafana_stack/configs/alloy.hcl:/etc/alloy/config.hcl:ro
      - alloy-data:/var/lib/alloy/data
    ports:
      - "12345:12345"  # Alloy UI
      - "4317:4317"    # OTLP gRPC (needed for CI tests)
    environment:
      - ALLOY_DISABLE_REPORTING=true
      - LOKI_URL=http://loki:3100/loki/api/v1/push
      - TEMPO_ENDPOINT=tempo:4319
      - MIMIR_URL=http://mimir:9009/api/v1/push
      - MIMIR_OTLP_ENDPOINT=mimir:9095
    depends_on:
      - tempo
      - loki
      - mimir

  # Tempo - Distributed Tracing
  tempo:
    <<: *common-service
    image: grafana/tempo:2.8.2
    container_name: coruscant-tempo
    restart: unless-stopped
    user: "0:0"  # Run as root to avoid permission issues in dev
    command:
      - -config.file=/etc/tempo.yaml
    volumes:
      - ./shared/infra/grafana_stack/configs/tempo.yaml:/etc/tempo.yaml:ro
      - tempo-data:/var/lib/tempo
    expose:
      - "3200"    # Tempo HTTP
      - "9095"    # Tempo gRPC
      - "4319"    # OTLP gRPC (for Alloy)
    environment:
      - MIMIR_PUSH_URL=http://mimir:9009/api/v1/push

  # Loki - Log Aggregation
  loki:
    <<: *common-service
    image: grafana/loki:3.5.5
    container_name: coruscant-loki
    restart: unless-stopped
    command:
      - -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./shared/infra/grafana_stack/configs/loki.yaml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    expose:
      - "3100"    # Loki HTTP

  # Mimir - Metrics Storage
  mimir:
    <<: *common-service
    image: grafana/mimir:2.17.1
    container_name: coruscant-mimir
    restart: unless-stopped
    command:
      - -config.file=/etc/mimir.yaml
      - -target=all,alertmanager
    volumes:
      - ./shared/infra/grafana_stack/configs/mimir.yaml:/etc/mimir.yaml:ro
      - mimir-data:/data
    expose:
      - "9009"    # Mimir HTTP
      - "9095"    # Mimir gRPC

  # Pyroscope - Continuous Profiling
  pyroscope:
    <<: *common-service
    image: grafana/pyroscope:1.14.1
    container_name: coruscant-pyroscope
    restart: unless-stopped
    volumes:
      - pyroscope-data:/data
    expose:
      - "4040"    # Pyroscope HTTP
    environment:
      - PYROSCOPE_LOG_LEVEL=debug

  # Grafana - Visualization and Dashboards
  grafana:
    <<: *common-service
    image: grafana/grafana:12.1.1
    container_name: coruscant-grafana
    restart: unless-stopped
    volumes:
      - ./shared/infra/grafana_stack/configs/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./shared/infra/grafana_stack/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./shared/infra/grafana_stack/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"    # Grafana UI
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_LOG_LEVEL=debug
      # Datasource URLs for templating
      - TEMPO_URL=http://tempo:3200
      - LOKI_URL=http://loki:3100
      - MIMIR_URL=http://mimir:9009/prometheus
      - PYROSCOPE_URL=http://pyroscope:4040
    depends_on:
      - tempo
      - loki
      - mimir
      - pyroscope

  mockery:
    image: vektra/mockery:v3.5.5
    container_name: coruscant-mockery
    entrypoint: ["mockery"]
    volumes:
      - .:/app:delegated
      - ./go.work:/app/go.work
      - go-mod-cache:/go/pkg/mod:cached
      - go-build-cache:/root/.cache/go-build:cached
    environment:
      <<: *common-go-envs

volumes:
  pg-data:
    name: coruscant-dev-pg-data
  go-mod-cache:
    name: coruscant-dev-go-mod-cache
  go-build-cache:
    name: coruscant-dev-go-build-cache
  # Observability stack volumes
  alloy-data:
    name: coruscant-observability-alloy-data
  tempo-data:
    name: coruscant-observability-tempo-data
  loki-data:
    name: coruscant-observability-loki-data
  mimir-data:
    name: coruscant-observability-mimir-data
  pyroscope-data:
    name: coruscant-observability-pyroscope-data
  grafana-data:
    name: coruscant-observability-grafana-data

networks:
  dev-net:
    name: coruscant-dev-network
    driver: bridge
